cpu {
  name = AX45MPV;
  elen = 64;
  flen = 64;
  felen = 64;
  vlen = 512;
  dlen = 512;
};

csim_header = %{
  //For fp32, exp(x) is valid in the range -87.3f to 88.7f.
  #define EXP_F32_MAX_FP32  88.7f
  #define EXP_F32_MIN_FP32  -87.3f
%};

csim = %{
  union UnionHexFloat {
    uint32_t  hex;
    float32_t flt;
    UnionHexFloat() {}
  };
  using u_hex_fp32_t = UnionHexFloat;
%};

rvv_insn exp{
  operand = {out vr:fp result, in vr:fp x};
  vector_mask = none;

  csim = %{
    unsigned csr_vtype_vsew = (csr_vtype >> 3) & 0x7;
    switch(csr_vtype_vsew) {
      //sew = 32
      case 2: {
        //elen = 64, each elements has 2 f32 points
        for(unsigned int j = 0; j < 2; j++) {

          float32_t flt_x = x.f32[j];
          flt_x = (flt_x > (float32_t)EXP_F32_MIN_FP32)? flt_x : (float32_t)EXP_F32_MIN_FP32;
          flt_x = (flt_x < (float32_t)EXP_F32_MAX_FP32)? flt_x : (float32_t)EXP_F32_MAX_FP32;

          flt_x = 1.4426950409f*flt_x;
          double _;
          const float frac = std::modf(flt_x, &_) + 1; // warning rounding
          const float s1 =  3.06852819440055e-1f;
          const float s2 = -2.40226506959101e-1f;
          const float s3 = -5.57129652016652e-2f;
          const float s4 = -9.01146535969578e-3f;
          const float s5 = -1.90188191959304e-3f;
          const float p1 = frac;
          const float p2 = p1 * frac;
          const float p3 = p2 * frac;
          const float p4 = p3 * frac;
          const float p5 = p4 * frac;
          const float delta = s1 * p1 + s2 * p2 + s3 * p3 + s4 * p4 + s5 * p5;
          u_hex_fp32_t v;
          v.hex = (1<<23)*(flt_x - delta + 127);

          result.f32[j] = v.flt;
        }
        break;
      }
      default:{
        cout<<"ERROR:Unsupported SEW value!"<<std::endl;
        assert(0);
      }
    }
  %};

  latency = 6;
  cpr = 1;
};
